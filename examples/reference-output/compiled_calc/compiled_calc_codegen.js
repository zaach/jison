
/* parser generated by jison 0.6.1-214 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var compiled_calc_codegen = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';



        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. none,merge
    //   try..catch: ...................... false
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() {},
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 91,
  "$accept": 0,
  "$end": 1,
  "%": 90,
  "&": 82,
  "(": 72,
  ")": 75,
  "*": 87,
  "+": 84,
  ",": 96,
  "-": 85,
  "/": 89,
  ":": 95,
  "=": 71,
  "?": 93,
  "ADD": 43,
  "ADD_3": 80,
  "ADD_4": 4,
  "AND": 65,
  "AND_3": 5,
  "AND_4": 6,
  "ASSIGN": 7,
  "BITWISE_AND": 38,
  "BITWISE_NOT": 126,
  "BITWISE_OR": 124,
  "BITWISE_XOR": 94,
  "COMMENT": 97,
  "CONDITION": 63,
  "CONSTANT": 8,
  "DIVIDE": 47,
  "ELSE": 9,
  "END": 10,
  "EOF": 1,
  "EOL": 11,
  "EQ": 61,
  "ERROR": 3,
  "ERROR_AND_SKIP": 12,
  "EXCHANGE_A_R1": 13,
  "EXCHANGE_A_R2": 14,
  "EXCHANGE_R1_R2": 15,
  "EXEC": 16,
  "FACTORIAL": 17,
  "FALSE": 18,
  "FALSE_AND_SKIP": 19,
  "FUNCTION": 70,
  "FUNCTION_0": 48,
  "FUNCTION_1": 49,
  "FUNCTION_2": 50,
  "FUNCTION_3": 51,
  "FUNCTION_N": 57,
  "GEQ": 20,
  "GT": 62,
  "IF": 21,
  "IF_ELSE": 22,
  "LEQ": 23,
  "LT": 60,
  "MODULO": 37,
  "MOVE_ALL_TO_RX": 24,
  "MOVE_FROM_R1": 25,
  "MOVE_FROM_R2": 26,
  "MOVE_R2_TO_R1": 27,
  "MOVE_TO_R1": 28,
  "MOVE_TO_R2": 29,
  "MOVE_TO_RX": 30,
  "MULTIPLY": 42,
  "MULTIPLY_3": 77,
  "MULTIPLY_4": 31,
  "NEQ": 110,
  "NOP": 32,
  "NOT": 33,
  "NUM": 73,
  "NUM_AND_SKIP": 74,
  "OR": 79,
  "OR_3": 34,
  "OR_4": 35,
  "PERCENT": 36,
  "POP": 39,
  "POWER": 40,
  "PUSH": 44,
  "PUSH_NUMS": 78,
  "SHIFT_EX": 41,
  "SKIP": 83,
  "STRING": 46,
  "STRING_AND_SKIP": 52,
  "SUBTRACT": 45,
  "SUBTRACT_3": 53,
  "SUBTRACT_4": 54,
  "THEN": 98,
  "TRUE": 55,
  "TRUE_AND_SKIP": 56,
  "UMINUS": 58,
  "UNSHIFT_EX": 59,
  "UNSHIFT_RX_TO_ALL": 64,
  "UNSHIFT_RX_TO_R12": 66,
  "UPLUS": 67,
  "VAR": 86,
  "VAR_TO_VALUE": 68,
  "VAR_VALUE": 69,
  "XOR": 88,
  "^": 81,
  "arglist": 102,
  "error": 2,
  "exp": 101,
  "input": 99,
  "line": 100,
  "s": 103,
  "|": 76,
  "~": 92
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "ERROR",
  4: "ADD_4",
  5: "AND_3",
  6: "AND_4",
  7: "ASSIGN",
  8: "CONSTANT",
  9: "ELSE",
  10: "END",
  11: "EOL",
  12: "ERROR_AND_SKIP",
  13: "EXCHANGE_A_R1",
  14: "EXCHANGE_A_R2",
  15: "EXCHANGE_R1_R2",
  16: "EXEC",
  17: "FACTORIAL",
  18: "FALSE",
  19: "FALSE_AND_SKIP",
  20: "GEQ",
  21: "IF",
  22: "IF_ELSE",
  23: "LEQ",
  24: "MOVE_ALL_TO_RX",
  25: "MOVE_FROM_R1",
  26: "MOVE_FROM_R2",
  27: "MOVE_R2_TO_R1",
  28: "MOVE_TO_R1",
  29: "MOVE_TO_R2",
  30: "MOVE_TO_RX",
  31: "MULTIPLY_4",
  32: "NOP",
  33: "NOT",
  34: "OR_3",
  35: "OR_4",
  36: "PERCENT",
  37: "MODULO",
  38: "BITWISE_AND",
  39: "POP",
  40: "POWER",
  41: "SHIFT_EX",
  42: "MULTIPLY",
  43: "ADD",
  44: "PUSH",
  45: "SUBTRACT",
  46: "STRING",
  47: "DIVIDE",
  48: "FUNCTION_0",
  49: "FUNCTION_1",
  50: "FUNCTION_2",
  51: "FUNCTION_3",
  52: "STRING_AND_SKIP",
  53: "SUBTRACT_3",
  54: "SUBTRACT_4",
  55: "TRUE",
  56: "TRUE_AND_SKIP",
  57: "FUNCTION_N",
  58: "UMINUS",
  59: "UNSHIFT_EX",
  60: "LT",
  61: "EQ",
  62: "GT",
  63: "CONDITION",
  64: "UNSHIFT_RX_TO_ALL",
  65: "AND",
  66: "UNSHIFT_RX_TO_R12",
  67: "UPLUS",
  68: "VAR_TO_VALUE",
  69: "VAR_VALUE",
  70: "FUNCTION",
  71: "=",
  72: "(",
  73: "NUM",
  74: "NUM_AND_SKIP",
  75: ")",
  76: "|",
  77: "MULTIPLY_3",
  78: "PUSH_NUMS",
  79: "OR",
  80: "ADD_3",
  81: "^",
  82: "&",
  83: "SKIP",
  84: "+",
  85: "-",
  86: "VAR",
  87: "*",
  88: "XOR",
  89: "/",
  90: "%",
  91: "!",
  92: "~",
  93: "?",
  94: "BITWISE_XOR",
  95: ":",
  96: ",",
  97: "COMMENT",
  98: "THEN",
  103: "s",
  110: "NEQ",
  124: "BITWISE_OR",
  126: "BITWISE_NOT"
},
TERROR: 2,
EOF: 1,

// internals: defined here so the object *structure* doesn't get modified by parse() et al,
// thus helping JIT compilers like Chrome V8.
originalQuoteName: null,
originalParseError: null,
cleanupAfterParse: null,
constructParseErrorInfo: null,
yyMergeLocationInfo: null,

__reentrant_call_depth: 0, // INTERNAL USE ONLY
__error_infos: [], // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
__error_recovery_infos: [], // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

// APIs which will be set up depending on user action code analysis:
//yyRecovering: 0,
//yyErrOk: 0,
//yyClearIn: 0,

// Helper APIs
// -----------

// Helper function which can be overridden by user code later on: put suitable quotes around
// literal IDs in a description string.
quoteName: function parser_quoteName(id_str) {
    return '"' + id_str + '"';
},

// Return the name of the given symbol (terminal or non-terminal) as a string, when available.
//
// Return NULL when the symbol is unknown to the parser.
getSymbolName: function parser_getSymbolName(symbol) {
    if (this.terminals_[symbol]) {
        return this.terminals_[symbol];
    }

    // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
    //
    // An example of this may be where a rule's action code contains a call like this:
    //
    //      parser.getSymbolName(#$)
    //
    // to obtain a human-readable name of the current grammar rule.
    var s = this.symbols_;
    for (var key in s) {
        if (s[key] === symbol) {
            return key;
        }
    }
    return null;
},

// Return a more-or-less human-readable description of the given symbol, when available,
// or the symbol itself, serving as its own 'description' for lack of something better to serve up.
//
// Return NULL when the symbol is unknown to the parser.
describeSymbol: function parser_describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    } else if (symbol === this.EOF) {
        return 'end of input';
    }
    var id = this.getSymbolName(symbol);
    if (id) {
        return this.quoteName(id);
    }
    return null;
},

// Produce a (more or less) human-readable list of expected tokens at the point of failure.
//
// The produced list may contain token or token set descriptions instead of the tokens
// themselves to help turning this output into something that easier to read by humans
// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
// expected terminals and nonterminals is produced.
//
// The returned list (array) will not contain any duplicate entries.
collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
    var TERROR = this.TERROR;
    var tokenset = [];
    var check = {};
    // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
    // If so, use that one instead of the less palatable token set.
    if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
        return [this.state_descriptions_[state]];
    }
    for (var p in this.table[state]) {
        p = +p;
        if (p !== TERROR) {
            var d = do_not_describe ? p : this.describeSymbol(p);
            if (d && !check[d]) {
                tokenset.push(d);
                check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.
            }
        }
    }
    return tokenset;
},
productions_: bp({
  pop: u([
  s,
  [99, 3],
  100,
  100,
  s,
  [101, 35],
  102,
  102
]),
  rule: u([
  0,
  3,
  3,
  s,
  [1, 5],
  2,
  1,
  3,
  2,
  3,
  4,
  s,
  [3, 17],
  2,
  2,
  c,
  [3, 3],
  2,
  2,
  4,
  3,
  1,
  2
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : input $end */

    // default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode none/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    input : %epsilon */

    this.$ = [];
    break;

case 2:
    /*! Production::    input : input line EOL */

    yyvstack[yysp - 2].push(yyvstack[yysp - 1]);
    this.$ = yyvstack[yysp - 2];
    break;

case 3:
    /*! Production::    input : input COMMENT EOL */

    console.log('COMMENT line(s): ', yyvstack[yysp - 1]);
    this.$ = yyvstack[yysp - 2];
    break;

case 4:
    /*! Production::    line : exp */

    console.log('expression result value: ', yyvstack[yysp]);
    this.$ = yyvstack[yysp];
    break;

case 5:
    /*! Production::    line : ERROR */

    console.log('expression result value: ERROR - erroneous input line');
    this.$ = NaN;
    break;

case 6:
    /*! Production::    exp : NUM */

    this.$ = yyvstack[yysp];
    break;

case 7:
    /*! Production::    exp : CONSTANT */

    this.$ = yy.constants[yyvstack[yysp]].value;
    break;

case 8:
    /*! Production::    exp : VAR */

    this.$ = yy.variables[yyvstack[yysp]].value;
    break;

case 9:
    /*! Production::    exp : ASSIGN exp */

    /*
       Note: #assign is always to a simple variable, hence we don't need the `#VAR`
       token here: it is implicit as there's nothing else we can do.
    
       Technically, this is an AST optimization, but it's such a fundamental one
       we do it here instead of later.
    
       NOTE: #assign implies the presence of a VAR as lhs (left hand side) so it
       would only be cluttering the AST stream to have a #VAR# token in there:
       it is *implicit* to #assign!
     */
    this.$ = yy.variables[yyvstack[yysp - 1]].value = yyvstack[yysp];
    break;

case 10:
    /*! Production::    exp : FUNCTION_0 */

    this.$ = yy.functions[yyvstack[yysp]].func.call(globalSpace);
    break;

case 11:
    /*! Production::    exp : FUNCTION arglist END */

    /*
       A lot of functions have only a few arguments, which we later optimize in our AST
       by including that knowledge in the FUNCTION token by using derivative tokens
       FUNCTION_0, FUNCTION_1, etc.: this can help a smart optimizer to include
       special optimizations for these functions without having to re-discover
       the arglist length.
       As that approach already disambiguates the function-versus-statement
       situation by having encoded arglist length in the FUNCTION token, these
       tokens never require a sentinel token in the AST stream: small AST stream size.
    
       Also don't forget to FLATTEN the arglist! ==> `concat.apply(a, arglist)`
    
       NOTE: the #FUNCTION# rule in Polish Notation is ambiguous unless we terminate it
       (which is easy to parse in an LALR(1) grammar while adding a argument count is not!)
       as we would otherwise get confused over this scenario:
    
            ... PLUS FUNCTION exp exp exp ...
    
       - is this a function with one argument and that last `exp` in there the second term
         of a binary(?) opcode waiting in the leading `...`?
       - is this a function with two arguments and that last `exp` the second
         term of the PLUS?
       - is this a function with three arguments and is the second term of the PLUS
         waiting in the trailing `...`?
    
       This is the trouble with opcodes which accept a variable number of arguments:
       such opcodes always have to be terminated by a sentinel to make the AST grammar
       unambiguous.
    */
    this.$ = yy.functions[yyvstack[yysp - 2]].func.apply(globalSpace, yyvstack[yysp - 1]);
    break;

case 12:
    /*! Production::    exp : FUNCTION_1 exp */

    this.$ = yy.functions[yyvstack[yysp - 1]].func.call(globalSpace, yyvstack[yysp]);
    break;

case 13:
    /*! Production::    exp : FUNCTION_2 exp exp */

    this.$ = yy.functions[yyvstack[yysp - 2]].func.call(globalSpace, yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 14:
    /*! Production::    exp : FUNCTION_3 exp exp exp */

    this.$ = yy.functions[yyvstack[yysp - 3]].func.call(globalSpace, yyvstack[yysp - 2], yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 15:
    /*! Production::    exp : EQ exp exp */

    this.$ = yyvstack[yysp - 1] == yyvstack[yysp];
    break;

case 16:
    /*! Production::    exp : NEQ exp exp */

    this.$ = yyvstack[yysp - 1] != yyvstack[yysp];
    break;

case 17:
    /*! Production::    exp : LEQ exp exp */

    this.$ = yyvstack[yysp - 1] <= yyvstack[yysp];
    break;

case 18:
    /*! Production::    exp : GEQ exp exp */

    this.$ = yyvstack[yysp - 1] >= yyvstack[yysp];
    break;

case 19:
    /*! Production::    exp : LT exp exp */

    this.$ = yyvstack[yysp - 1] < yyvstack[yysp];
    break;

case 20:
    /*! Production::    exp : GT exp exp */

    this.$ = yyvstack[yysp - 1] > yyvstack[yysp];
    break;

case 21:
    /*! Production::    exp : OR exp exp */

    this.$ = yyvstack[yysp - 1] || yyvstack[yysp];
    break;

case 22:
    /*! Production::    exp : XOR exp exp */

    this.$ = !!(!!yyvstack[yysp - 1] ^ !!yyvstack[yysp]);
    break;

case 23:
    /*! Production::    exp : AND exp exp */

    this.$ = yyvstack[yysp - 1] && yyvstack[yysp];
    break;

case 24:
    /*! Production::    exp : BITWISE_OR exp exp */

    this.$ = yyvstack[yysp - 1] | yyvstack[yysp];
    break;

case 25:
    /*! Production::    exp : BITWISE_XOR exp exp */

    this.$ = yyvstack[yysp - 1] ^ yyvstack[yysp];
    break;

case 26:
    /*! Production::    exp : BITWISE_AND exp exp */

    this.$ = yyvstack[yysp - 1] & yyvstack[yysp];
    break;

case 27:
    /*! Production::    exp : ADD exp exp */

    this.$ = yyvstack[yysp - 1] + yyvstack[yysp];
    break;

case 28:
    /*! Production::    exp : SUBTRACT exp exp */

    this.$ = yyvstack[yysp - 1] - yyvstack[yysp];
    break;

case 29:
    /*! Production::    exp : MULTIPLY exp exp */

    this.$ = yyvstack[yysp - 1] * yyvstack[yysp];
    break;

case 30:
    /*! Production::    exp : DIVIDE exp exp */

    this.$ = yyvstack[yysp - 1] / yyvstack[yysp];
    break;

case 31:
    /*! Production::    exp : MODULO exp exp */

    this.$ = yyvstack[yysp - 1] % yyvstack[yysp];
    break;

case 32:
    /*! Production::    exp : UMINUS exp */

    this.$ = -yyvstack[yysp];
    break;

case 33:
    /*! Production::    exp : UPLUS exp */

    this.$ = +yyvstack[yysp];
    break;

case 34:
    /*! Production::    exp : POWER exp exp */

    this.$ = Math.pow(yyvstack[yysp - 1], yyvstack[yysp]);
    break;

case 35:
    /*! Production::    exp : PERCENT exp */

    this.$ = yyvstack[yysp] / 100;
    break;

case 36:
    /*! Production::    exp : FACTORIAL exp */

    this.$ = yy.predefined_functions.factorial.call(globalSpace, yyvstack[yysp]);
    break;

case 37:
    /*! Production::    exp : BITWISE_NOT exp */

    this.$ = ~yyvstack[yysp];
    break;

case 38:
    /*! Production::    exp : NOT exp */

    this.$ = !yyvstack[yysp];
    break;

case 39:
    /*! Production::    exp : IF_ELSE exp exp exp */

    if (yyvstack[yysp - 2]) {
      this.$ = yyvstack[yysp - 1];
    } else {
      this.$ = yyvstack[yysp];
    }
    break;

case 40:
    /*! Production::    exp : IF exp exp */

    if (yyvstack[yysp - 1]) {
      this.$ = yyvstack[yysp];
    } else {
      this.$ = 0;
    }
    break;

case 41:
    /*! Production::    arglist : exp */

    this.$ = [yyvstack[yysp]];
    break;

case 42:
    /*! Production::    arglist : arglist exp */

    this.$ = yyvstack[yysp - 1];
    this.$.push(yyvstack[yysp]);
    break;

}
},
table: bt({
  len: u([
  1,
  40,
  1,
  1,
  s,
  [0, 5],
  36,
  0,
  37,
  s,
  [36, 29],
  s,
  [0, 3],
  37,
  c,
  [38, 3],
  c,
  [25, 20],
  c,
  [28, 4],
  c,
  [26, 3],
  c,
  [69, 5],
  s,
  [0, 17],
  c,
  [19, 4]
]),
  symbol: u([
  99,
  1,
  3,
  7,
  8,
  17,
  s,
  [20, 4, 1],
  33,
  36,
  37,
  38,
  40,
  42,
  43,
  45,
  s,
  [47, 5, 1],
  58,
  60,
  61,
  62,
  65,
  67,
  70,
  73,
  79,
  86,
  88,
  94,
  97,
  100,
  101,
  110,
  124,
  126,
  11,
  11,
  c,
  [40, 32],
  c,
  [38, 4],
  c,
  [36, 33],
  102,
  c,
  [37, 36],
  c,
  [36, 1013],
  10,
  c,
  [901, 898]
]),
  type: u([
  0,
  1,
  s,
  [2, 34],
  0,
  0,
  s,
  [2, 37],
  c,
  [38, 36],
  c,
  [75, 37],
  c,
  [36, 1044],
  c,
  [901, 869]
]),
  state: u([
  1,
  2,
  4,
  43,
  45,
  44,
  s,
  [46, 29, 1],
  s,
  [76, 25, 1]
]),
  mode: u([
  s,
  [1, 2000]
]),
  goto: u([
  5,
  9,
  7,
  36,
  18,
  40,
  39,
  17,
  38,
  35,
  31,
  26,
  34,
  29,
  27,
  28,
  30,
  10,
  12,
  13,
  14,
  32,
  19,
  15,
  20,
  23,
  33,
  11,
  6,
  21,
  8,
  22,
  25,
  3,
  16,
  24,
  37,
  41,
  42,
  c,
  [38, 32],
  c,
  [37, 3],
  c,
  [35, 1052],
  75,
  c,
  [876, 873]
])
}),
defaultActions: bda({
  idx: u([
  0,
  s,
  [4, 5, 1],
  10,
  41,
  42,
  43,
  45,
  46,
  66,
  67,
  s,
  [69, 4, 1],
  75,
  76,
  77,
  s,
  [79, 18, 1],
  98,
  99,
  100
]),
  goto: u([
  1,
  s,
  [4, 5, 1],
  10,
  2,
  3,
  9,
  41,
  12,
  32,
  33,
  s,
  [35, 4, 1],
  11,
  42,
  13,
  s,
  [15, 17, 1],
  34,
  40,
  14,
  39
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input, globalSpace) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 101 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined,
        globalSpace: globalSpace  // parseParams::globalSpace      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }




        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;




    lexer.setInput(input, sharedState_yy);

    // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
    // this initial `setInput()` call: hence we can now check and decide
    // whether we'll go with the standard, slower, lex() API or the
    // `fast_lex()` one:
    if (typeof lexer.canIUse === 'function') {
        var lexerInfo = lexer.canIUse();
        if (lexerInfo.fastLex && typeof fastLex === 'function') {
            lex = fastLex;
        }
    } 



    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;





    if (this.pre_parse) {
        this.pre_parse.call(this, sharedState_yy);
    }
    if (sharedState_yy.pre_parse) {
        sharedState_yy.pre_parse.call(this, sharedState_yy);
    }

    newState = sstack[sp - 1];
    for (;;) {
        // retrieve state number from top of stack
        state = newState;               // sstack[sp - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = 2;
            newState = this.defaultActions[state];
        } else {
            // The single `==` condition below covers both these `===` comparisons in a single
            // operation:
            //
            //     if (symbol === null || typeof symbol === 'undefined') ...
            if (!symbol) {
                symbol = lex();
            }
            // read action for current state and first input
            t = (table[state] && table[state][symbol]) || NO_ACTION;
            newState = t[1];
            action = t[0];











            // handle parse error
            if (!action) {
                var errStr;
                var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                var expected = this.collect_expected_token_set(state);

                // Report error
                if (typeof lexer.yylineno === 'number') {
                    errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                } else {
                    errStr = 'Parse error: ';
                }
                if (typeof lexer.showPosition === 'function') {
                    errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                }
                if (expected.length) {
                    errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                } else {
                    errStr += 'Unexpected ' + errSymbolDescr;
                }
                // we cannot recover from the error!
                p = this.constructParseErrorInfo(errStr, null, expected, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }


        }










        switch (action) {
        // catch misc. parse failures:
        default:
            // this shouldn't happen, unless resolve defaults are off
            if (action instanceof Array) {
                p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;
            }
            // Another case of better safe than sorry: in case state transitions come out of another error recovery process
            // or a buggy LUT (LookUp Table):
            p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') {
                retval = r;
            }
            break;

        // shift:
        case 1:
            stack[sp] = symbol;
            vstack[sp] = lexer.yytext;

            sstack[sp] = newState; // push state

            ++sp;
            symbol = 0;




            // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




            continue;

        // reduce:
        case 2:



            this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
            yyrulelen = this_production[1];










            r = this.performAction.call(yyval, newState, sp - 1, vstack);

            if (typeof r !== 'undefined') {
                retval = r;
                break;
            }

            // pop off stack
            sp -= yyrulelen;

            // don't overwrite the `symbol` variable: use a local var to speed things up:
            var ntsymbol = this_production[0];    // push nonterminal (reduce)
            stack[sp] = ntsymbol;
            vstack[sp] = yyval.$;

            // goto new state = table[STATE][NONTERMINAL]
            newState = table[sstack[sp - 1]][ntsymbol];
            sstack[sp] = newState;
            ++sp;









            continue;

        // accept:
        case 3:
            if (sp !== -2) {
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                sp--;
                if (typeof vstack[sp] !== 'undefined') {
                    retval = vstack[sp];
                }
            }
            break;
        }

        // break out of loop: we accept or fail with error
        break;
    }
    
    // ... AND FINALLY ...

    retval = this.cleanupAfterParse(retval, true, true);


    

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;



function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = compiled_calc_codegen;
  exports.Parser = compiled_calc_codegen.Parser;
  exports.parse = function () {
    return compiled_calc_codegen.parse.apply(compiled_calc_codegen, arguments);
  };
  
}
